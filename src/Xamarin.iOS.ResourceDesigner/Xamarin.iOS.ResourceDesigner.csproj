<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>10.0</LangVersion>
    <Nullable>Enable</Nullable>
    <AssemblyName>Xamarin.iOS.ResourceDesigner</AssemblyName>
    <RootNamespace>Xamarin.iOS.ResourceDesigner</RootNamespace>
    <!-- This target will run when MSBuild is collecting the files to be
         packaged, and we'll implement it below. This property controls the
         dependency list for this packaging process, so by adding our custom
         property we hook ourselves into the process in a supported way. -->
	<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
	<!-- This property tells MSBuild where the root folder of the package's
         build assets should be. Because we are not a library package, we should
         not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
	<BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <!-- Tell the SDK to generate a deps.json file -->
	<GenerateDependencyFile>true</GenerateDependencyFile>
    <!-- Forces SDK to copy dependencies into build output in order to make
         packing easier -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <PropertyGroup Label="Nuget">
    <PackageId>Xamarin.iOS.ResourceDesigner</PackageId>
    <PackageVersion>0.4.6</PackageVersion>
    <Authors>Taras Shevchuk</Authors>
    <Owners>Taras Shevchuk</Owners>
    <!-- <PackageIcon>icon.png</PackageIcon> -->
    <Summary>Xamarin.iOS Resource designer generation, inspired by R.swift</Summary>
    <Title>Xamarin.iOS.ResourceDesigner</Title>
    <Description>Xamarin.iOS Resource designer generation, inspired by R.swift</Description>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/Saratsin/Xamarin.iOS.ResourceDesigner</PackageProjectUrl>
    <PackageTags>Xamarin, iOS, Resources</PackageTags>

    <PackOnBuild>true</PackOnBuild>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <!-- NuGet does validation that libraries in a package are exposed as
         dependencies, but we _explicitly_ do not want that behavior for
         MSBuild tasks. They are isolated by design. Therefore we ignore this
         specific warning. -->
	<NoWarn>NU5100</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>

    <DesignTimeBuild>false</DesignTimeBuild>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
 	  <!-- these lines pack the build props/targets files to the `build` folder
           in the generated package. By convention, the .NET SDK will look for
           build\<Package Id>.props and build\<Package Id> targets for automatic
           inclusion in the build. -->
    <Content Include="build\Xamarin.iOS.ResourceDesigner.targets" PackagePath="build\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" Version="17.6.3" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.6.3" PrivateAssets="all" />
    <PackageReference Include="Stubble.Core" Version="1.10.8" PrivateAssets="all" />
  </ItemGroup>

  <!-- The include needs to happen after output has been copied to build output
       folder but before NuGet generates a nuspec.
       See https://github.com/NuGet/Home/issues/4704.-->
  <Target Name="PackTaskDependencies" BeforeTargets="GenerateNuspec">
    <ItemGroup>
      <_PackageFiles Include="bin\$(Configuration)\*\Stubble.Core.dll">
        <PackagePath>tools\%(RecursiveDir)</PackagePath>
        <Visible>false</Visible>
        <BuildAction>Content</BuildAction>
      </_PackageFiles>
    </ItemGroup>
  </Target>

  <!-- This is the target we defined above. It's purpose is to add all of our
       PackageReference and ProjectReference's runtime assets to our package
       output.  -->
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
	  <ItemGroup>
		  <!-- The TargetPath is the path inside the package that the source
               file will be placed. This is already precomputed in the
               ReferenceCopyLocalPaths items' DestinationSubPath, so reuse it
               here. -->
		  <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
	  </ItemGroup>
  </Target>

  <!-- This target adds the generated deps.json file to our package output -->
  <Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">
  	<ItemGroup>
  		<BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
  	</ItemGroup>
  </Target>

  <ItemGroup>
    <None Remove="Resources\Resource.designer.mustache" />
    <EmbeddedResource Include="Resources\Resource.designer.mustache" />
  </ItemGroup>

</Project>
